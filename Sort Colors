Sort Colors
Medium

4092

239

Add to List

Share
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Follow up:

Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?
 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
Example 3:

Input: nums = [0]
Output: [0]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is 0, 1, or 2.

-----------

class Solution {
    public void sortColors(int[] nums) {
        //Arrays.sort(nums);
        
        int c0=0,c1=0,c2=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==0)c0++;
            else if(nums[i]==1)c1++;
            else{
                c2++;
            }
        }
        int[] a=new int[nums.length];
        int j=0;
        int k=0;
        while(j<c0)
        {
            a[k]=0;
            j++;k++;
        }
        j=0;
        while(j<c1)
        {
            a[k]=1;
            j++;k++;
        }
        j=0;
        while(j<c2)
        {
            a[k]=2;
            j++;k++;
        }
        for(int ii=0;ii<nums.length;ii++)
        {
            nums[ii]=a[ii];
        }    
    }
}
